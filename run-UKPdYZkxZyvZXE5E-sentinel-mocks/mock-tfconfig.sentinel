import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {
			"ip1": {
				"depends_on":  [],
				"description": "",
				"references": [
					"google_compute_instance.m1",
				],
				"sensitive": false,
				"value":     undefined,
			},
		},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config": {
							"project": "terraformpractical",
						},
						"references": {
							"project": [],
						},
						"version": "",
					},
				},
				"config": {
					"project": "terraformpractical",
				},
				"references": {
					"project": [],
				},
				"version": "",
			},
		},
		"resources": {
			"google_compute_firewall": {
				"f1": {
					"config": {
						"allow": [
							{
								"protocol": "icmp",
							},
							{
								"ports": [
									"80",
									"22",
								],
								"protocol": "tcp",
							},
						],
						"name": "firewall",
					},
					"provisioners": null,
					"references": {
						"allow": [
							{
								"protocol": [],
							},
							{
								"ports":    [],
								"protocol": [],
							},
						],
						"name": [],
						"network": [
							"google_compute_network.myvpc",
						],
					},
				},
			},
			"google_compute_instance": {
				"m1": {
					"config": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image": "debian-cloud/debian-9",
									},
								],
							},
						],
						"machine_type":            "e2-micro",
						"metadata_startup_script": "sudo apt install htop -y",
						"name": "instance4",
						"network_interface": [
							{
								"access_config": [
									{},
								],
							},
						],
						"zone": "us-central1-b",
					},
					"provisioners": null,
					"references": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image": [],
									},
								],
							},
						],
						"machine_type":            [],
						"metadata_startup_script": [],
						"name": [],
						"network_interface": [
							{
								"access_config": [
									{},
								],
								"subnetwork": [
									"google_compute_subnetwork.subnet1",
								],
							},
						],
						"zone": [],
					},
				},
			},
			"google_compute_network": {
				"myvpc": {
					"config": {
						"auto_create_subnetworks": false,
						"name": "myvpc",
					},
					"provisioners": null,
					"references": {
						"auto_create_subnetworks": [],
						"name": [],
					},
				},
			},
			"google_compute_subnetwork": {
				"subnet1": {
					"config": {
						"ip_cidr_range": "10.0.0.0/16",
						"name":          "test-subnetwork",
						"region":        "us-central1",
					},
					"provisioners": null,
					"references": {
						"ip_cidr_range": [],
						"name":          [],
						"network": [
							"google_compute_network.myvpc",
						],
						"region": [],
					},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
